/*globals describe, it*/

var should = require('should');
var adapter = require('../ampersand-sync-adapter');
var ampersandCollection = require('ampersand-collection');

describe('ampersand-sync-adapter', function(){

  var sync = function (method, model, options){
    this.__syncArgs = arguments;
    return options.success();
  };

  it('should return the correct api', function(done){

    var Col = ampersandCollection.extend(adapter, {url: '/v1/foo'});
    var col = new Col();
    col.sync = sync;

    col.sync.should.be.type('function');
    col.fetch.should.be.type('function');
    col.create.should.be.type('function');
    col.fetchById.should.be.type('function');
    col.getOrFetch.should.be.type('function');

    done();
  });

  it('should fetch with correct props', function(done){
    var Col = ampersandCollection.extend(adapter, {url: '/v1/foo'});
    var col = new Col();
    col.sync = sync;

    col.fetch({
      success: function(data){
        should.exist(data);
        data.sync.should.be.type('function');
        data.should.be.instanceOf(ampersandCollection);

        done();
      }
    });
  });

  it('should fetch', function(done){
    var Col = ampersandCollection.extend(adapter, {url: '/v1/foo'});
    var col = new Col();
    col.sync = sync;

    col.fetch();

    col.__syncArgs[0].should.equal('read');
    col.__syncArgs[1].should.equal(col);
    col.__syncArgs[2].parse.should.equal(true);
    col.__syncArgs[2].success.should.be.type('function');
    col.__syncArgs[2].error.should.be.type('function');

    done();
  });

  it('should return error on fetch error', function(done){
    var Col = ampersandCollection.extend(adapter, {url: '/v1/foo'});
    var col = new Col();
    col.sync = function (method, model, options){
      return options.error();
    };

    col.fetch({
      success: function(data){
        should.not.exist(data);
      },
      error: function(data){
        should.exist(data);
        done();
      }
    });
  });

});
